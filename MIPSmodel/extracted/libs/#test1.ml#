exception Fail;;
exception FailSafe;;
exception EndReg;;

open X86Semantics
open Big_int


let empty_oracle =
  { X86_RTL.oracle_bits = (fun a b -> zero_big_int); X86_RTL.oracle_offset = zero_big_int }


let (loaded_reg, pc, loaded_seg) = load_regpc empty_regpcseg reg_file;;

let init_machine =
  { X86_MACHINE.gp_regs = loaded_reg;
    seg_regs_starts =  loaded_seg;
    seg_regs_limits = (fun seg_reg->(Word.repr (bii 31) (Word.max_unsigned (bii 31))));
    flags_reg = (fun f -> Word.zero (bii 0));
    control_regs = (fun c -> Word.zero (bii 31));
    debug_regs =  (fun d -> Word.zero (bii 31));
    pc_reg = pc; };; 


let init_full_machine = 
   { X86_MACHINE.core = init_machine;
     fpu = empty_fpu_machine;
   }


let init_rtl_state = 
{
  X86_RTL.rtl_oracle = empty_oracle;
  rtl_mach_state = init_full_machine;
  rtl_memory = loaded_mem
};;


let get_instr s = Scanf.sscanf s "%LX" (fun h -> h);;

let str_in = Sys.argv.(1)
let sprint_hex h = Printf.sprintf "%LX" h
let rec loop icnt rs = 
  try(
    let (new_instr:Int64.t) = get_instr str_in in
    Printf.sprintf "%Lx" new_instr;
    print_string " Debug.... \n";
     if icnt >0 then
        loop (icnt-1) rs
  ) with
    | End_of_file|Scanf.Scan_failure _ -> print_string "EOF\n"

let _ =
  loop 5 init_rtl_state;;